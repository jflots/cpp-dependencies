/*
 * Copyright (C) 2012-2016. TomTom International BV (http://tomtom.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdafx.h"

#include "Configuration.h"
#include "Constants.h"
#include "FstreamInclude.h"
#include <iostream>
#include <stdlib.h>

// Split a string with parts in quotes, into pieces on spaces while holding quoted parts together.
std::vector<std::string> split(const std::string& str) {  
  std::vector<std::string> rv;
  const char* s = &str[0], *e = &str[str.size()-1];
  const char* p = s;
  bool inQuotes = false;
  while (s < e) {
    if (*s == ' ' && !inQuotes) {
      if (*p != '"')
        rv.push_back(std::string(p, s));
      else
        rv.push_back(std::string(p+1, s-1));

      p = s+1;
    } else if (*s == '\"') {
      inQuotes = !inQuotes;
    }
    s++;
  }
  if (p != s) rv.push_back(std::string(p, s));
  return rv;
}

Configuration::Configuration()
: companyName("YourCompany")
, regenTag("GENERATED BY CPP-DEPENDENCIES")
, versionUsed(CURRENT_VERSION)
, cycleColor("orange")
, publicDepColor("blue")
, privateDepColor("lightblue")
, componentLinkLimit(30)
, componentLocLowerLimit(200)
, componentLocUpperLimit(20000)
, fileLocUpperLimit(2000)
{
  streams::ifstream in(CONFIG_FILE);
  std::string line;
  while (in.good()) {
    std::getline(in, line);
    while (in.good() && line.back() == '\\') {
      std::string nextLine;
      std::getline(in, nextLine);
      line += nextLine;
    }

    size_t pos = line.find_first_of("#");
    if (pos != std::string::npos)
      line.resize(line.find_first_of("#"));

    pos = line.find(": ");
    if (pos == std::string::npos)
      continue;

    std::string name = line.substr(0, pos);
    std::string value = line.substr(pos+2);
    if (name == "cycleColor") { cycleColor = value; }
    else if (name == "publicDepColor") { publicDepColor = value; }
    else if (name == "versionUsed") { versionUsed = value; }
    else if (name == "privateDepColor") { privateDepColor = value; }
    else if (name == "regenTag") { regenTag = value; }
    else if (name == "companyName") { companyName = value; }
    else if (name == "componentLinkLimit") { componentLinkLimit = atol(value.c_str()); }
    else if (name == "componentLocLowerLimit") { componentLocLowerLimit = atol(value.c_str()); }
    else if (name == "componentLocUpperLimit") { componentLocUpperLimit = atol(value.c_str()); }
    else if (name == "fileLocUpperLimit") { fileLocUpperLimit = atol(value.c_str()); }
    else if (name == "blacklist") { blacklist = split(value); }
    else {
      std::cout << "Ignoring unknown tag in configuration file: " << name << "\n";
    }
  }
}

Configuration& Configuration::Get()
{
  static Configuration config;
  return config;
}


